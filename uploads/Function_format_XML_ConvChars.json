[
  {
    "Container": "format_XML_ConvChars",
    "RuleGUID": "fda5054f-421d-4644-b4f6-b243b8c95355",
    "RuleName": "Does field contain a special char?",
    "RuleID": "",
    "FunctionName": "HasRegExpr",
    "ParentGUID": null,
    "ParentActionIndex": null,
    "Children": [],
    "Actions": [
      {
        "ActionValue": "4",
        "ActionName": "Yes",
        "ChildRules": [
          {
            "Container": "format_XML_ConvChars",
            "RuleGUID": "9a4d0561-3733-4efc-951c-c1b6dff9d985",
            "RuleName": "Convert ampersands",
            "RuleID": "",
            "FunctionName": "FormatRegExpr",
            "ParentGUID": "fda5054f-421d-4644-b4f6-b243b8c95355",
            "ParentActionIndex": 0,
            "Children": [],
            "Actions": [
              {
                "ActionValue": "0",
                "ActionName": "",
                "ChildRules": [],
                "Attributes": {}
              },
              {
                "ActionValue": "0",
                "ActionName": "",
                "ChildRules": [],
                "Attributes": {}
              },
              {
                "ActionValue": "0",
                "ActionName": "",
                "ChildRules": [],
                "Attributes": {}
              }
            ],
            "Attributes": {
              "_ParamList0": "{0}",
              "_FunctionVersion": "2",
              "OutputFormat": "\"\\1341FAKEAMPamp;\\1342\"",
              "_RegExTestValues": "{\"Bob & Sam\",\"&Sam\",\"Bob&\",\"Bob&Sam\",\"&\"}",
              "_RegExMatchBaseline": "{}",
              "_RegExOutputBaseline": "{}",
              "InputFormat": "\"\\134(.*\\134)&\\134(.*\\134)\"",
              "CaseSensitive2": "0"
            }
          },
          {
            "Container": "format_XML_ConvChars",
            "RuleGUID": "04cefe8c-459c-4619-b2ce-a19294851bae",
            "RuleName": "Convert greater-than",
            "RuleID": "",
            "FunctionName": "FormatRegExpr",
            "ParentGUID": "fda5054f-421d-4644-b4f6-b243b8c95355",
            "ParentActionIndex": 0,
            "Children": [],
            "Actions": [
              {
                "ActionValue": "0",
                "ActionName": "",
                "ChildRules": [],
                "Attributes": {}
              },
              {
                "ActionValue": "0",
                "ActionName": "",
                "ChildRules": [],
                "Attributes": {}
              },
              {
                "ActionValue": "0",
                "ActionName": "",
                "ChildRules": [],
                "Attributes": {}
              }
            ],
            "Attributes": {
              "_ParamList0": "{0}",
              "_FunctionVersion": "2",
              "OutputFormat": "\"\\1341FAKEAMPgt;\\1342\"",
              "_RegExTestValues": "{\"Bob > Sam\",\">Sam\",\"Bob>\",\"Bob>Sam\",\">\"}",
              "_RegExMatchBaseline": "{}",
              "_RegExOutputBaseline": "{}",
              "InputFormat": "\"\\134(.*\\134)>\\134(.*\\134)\"",
              "CaseSensitive2": "0"
            }
          },
          {
            "Container": "format_XML_ConvChars",
            "RuleGUID": "6a2a0034-63ad-4722-b074-2eb142a2c693",
            "RuleName": "Convert double-quotes",
            "RuleID": "",
            "FunctionName": "FormatRegExpr",
            "ParentGUID": "fda5054f-421d-4644-b4f6-b243b8c95355",
            "ParentActionIndex": 0,
            "Children": [],
            "Actions": [
              {
                "ActionValue": "0",
                "ActionName": "",
                "ChildRules": [],
                "Attributes": {}
              },
              {
                "ActionValue": "0",
                "ActionName": "",
                "ChildRules": [],
                "Attributes": {}
              },
              {
                "ActionValue": "0",
                "ActionName": "",
                "ChildRules": [],
                "Attributes": {}
              }
            ],
            "Attributes": {
              "_ParamList0": "{0}",
              "_FunctionVersion": "2",
              "OutputFormat": "\"\\1341FAKEAMPquot;\\1342\"",
              "_RegExTestValues": "{\"Bob \\042 Sam\\042\",\"\\042Sam\",\"Bob\\042\",\"Bob\\042Sam\",\"\\042\"}",
              "_RegExMatchBaseline": "{}",
              "_RegExOutputBaseline": "{}",
              "InputFormat": "\"\\134(.*\\134)\\042\\134(.*\\134)\"",
              "CaseSensitive2": "0"
            }
          },
          {
            "Container": "format_XML_ConvChars",
            "RuleGUID": "977e4d01-9836-4992-85dd-660754ec8709",
            "RuleName": "Convert less-than",
            "RuleID": "",
            "FunctionName": "FormatRegExpr",
            "ParentGUID": "fda5054f-421d-4644-b4f6-b243b8c95355",
            "ParentActionIndex": 0,
            "Children": [],
            "Actions": [
              {
                "ActionValue": "0",
                "ActionName": "",
                "ChildRules": [],
                "Attributes": {}
              },
              {
                "ActionValue": "0",
                "ActionName": "",
                "ChildRules": [],
                "Attributes": {}
              },
              {
                "ActionValue": "0",
                "ActionName": "",
                "ChildRules": [],
                "Attributes": {}
              }
            ],
            "Attributes": {
              "_ParamList0": "{0}",
              "_FunctionVersion": "2",
              "OutputFormat": "\"\\1341FAKEAMPlt;\\1342\"",
              "_RegExTestValues": "{\"Bob < Sam\",\"<Sam\",\"Bob<\",\"Bob<Sam\",\"<\"}",
              "_RegExMatchBaseline": "{}",
              "_RegExOutputBaseline": "{}",
              "InputFormat": "\"\\134(.*\\134)<\\134(.*\\134)\"",
              "CaseSensitive2": "0"
            }
          },
          {
            "Container": "format_XML_ConvChars",
            "RuleGUID": "4a7bd517-28f3-4630-86be-2455307fd25e",
            "RuleName": "Convert single-quote",
            "RuleID": "",
            "FunctionName": "FormatRegExpr",
            "ParentGUID": "fda5054f-421d-4644-b4f6-b243b8c95355",
            "ParentActionIndex": 0,
            "Children": [],
            "Actions": [
              {
                "ActionValue": "0",
                "ActionName": "",
                "ChildRules": [],
                "Attributes": {}
              },
              {
                "ActionValue": "0",
                "ActionName": "",
                "ChildRules": [],
                "Attributes": {}
              },
              {
                "ActionValue": "0",
                "ActionName": "",
                "ChildRules": [],
                "Attributes": {}
              }
            ],
            "Attributes": {
              "_ParamList0": "{0}",
              "_FunctionVersion": "2",
              "OutputFormat": "\"\\1341FAKEAMPapos;\\1342\"",
              "_RegExTestValues": "{\"Bob ' Sam\",\"'Sam\",\"Bob'\",\"Bob'Sam\",\"'\"}",
              "_RegExMatchBaseline": "{}",
              "_RegExOutputBaseline": "{}",
              "InputFormat": "\"\\134(.*\\134)'\\134(.*\\134)\"",
              "CaseSensitive2": "0"
            }
          }
        ],
        "Attributes": {}
      },
      {
        "ActionValue": "0",
        "ActionName": "",
        "ChildRules": [],
        "Attributes": {}
      },
      {
        "ActionValue": "65544",
        "ActionName": "",
        "ChildRules": [],
        "Attributes": {}
      }
    ],
    "Attributes": {
      "CaseSensitive": "1",
      "_ParamList0": "{0}",
      "_FunctionVersion": "65539",
      "RegularExpression": "\"[&><\\042']\"",
      "OutputFormat": "\"\"",
      "_RegExTestValues": "{\"A\",\"A'\",\"A'\\042\",\"A\\042\",\"\\042A\",\"'A\",\"A&B\",\"&AB\",\"AB&\",\"A<B\",\"A>B\",\"<>'\\042&\"}",
      "_RegExMatchBaseline": "{}",
      "_RegExOutputBaseline": "{}"
    }
  }
]